library(data.table)
library(ggplot2)
library(quantmod)
getSymbols("FRO.OL")
FRO.OL
head(FRO.OL)
Fro <- data.table(getSymbols("FRO.OL"))
Fro
Fro$V1
FRO.OL
FRO.OL$
class(FRO.OL)
data.frame(FRO.OL)
x<-data.frame(FRO.OL)
x
x<-data.table(data.frame(FRO.OL))
x
Fro <- as.data.table.xts(getSymbols("FRO.OL"))
library(data.table)
library(ggplot2)
library(quantmod)
as.data.table.xts <- function(x, keep.rownames = TRUE){
stopifnot(requireNamespace("xts") || !missing(x) || xts::is.xts(x))
r = setDT(as.data.frame(x), keep.rownames = keep.rownames)
if(!keep.rownames) return(r[])
setnames(r,"rn","index")
setkeyv(r,"index")[]
}
Fro <- as.data.table.xts(getSymbols("FRO.OL"))
Fro
Fro <- as.data.table(getSymbols("FRO.OL"))
Fro
FRO.OL
class(FRO.OL)
as.data.table.xts <- function(x, ...) {
cn <- colnames(x)
sscn <- strsplit(cn, "\\.")
indexClass(x) <- c('POSIXct', 'POSIXt') #coerce index to POSIXct
DT <- data.table(time=index(x), coredata(x))
#DT <- data.table(IDateTime(index(x)), coredata(x))
## If there is a Symbol embedded in the colnames, strip it out and make it a
## column
if (all(sapply(sscn, "[", 1) == sscn[[1]][1])) {
Symbol <- sscn[[1]][1]
setnames(DT, names(DT)[-1], sub(paste0(Symbol, "."), "", cn))
DT <- DT[, Symbol:=Symbol]
setkey(DT, Symbol, time)[]
} else {
setkey(DT, time)[]
}
}
Fro <- as.data.table.xts(getSymbols("FRO.OL"))
library(data.table)
library(ggplot2)
library(quantmod)
as.data.table.xts <- function(x, ...) {
cn <- colnames(x)
sscn <- strsplit(cn, "\\.")
indexClass(x) <- c('POSIXct', 'POSIXt') #coerce index to POSIXct
DT <- data.table(time=index(x), coredata(x))
#DT <- data.table(IDateTime(index(x)), coredata(x))
## If there is a Symbol embedded in the colnames, strip it out and make it a
## column
if (all(sapply(sscn, "[", 1) == sscn[[1]][1])) {
Symbol <- sscn[[1]][1]
setnames(DT, names(DT)[-1], sub(paste0(Symbol, "."), "", cn))
DT <- DT[, Symbol:=Symbol]
setkey(DT, Symbol, time)[]
} else {
setkey(DT, time)[]
}
}
Fro <- as.data.table.xts(getSymbols("FRO.OL"))
as.data.table.xts <- function(x, ...) {
cn <- colnames(x)
sscn <- strsplit(cn, "\\.")
indexClass(x) <- c('POSIXct', 'POSIXt') #coerce index to POSIXct
DT <- data.table(time=index(x), coredata(x))
#DT <- data.table(IDateTime(index(x)), coredata(x))
## If there is a Symbol embedded in the colnames, strip it out and make it a
## column
if (all(sapply(sscn, "[", 1) == sscn[[1]][1])) {
Symbol <- sscn[[1]][1]
setnames(DT, names(DT)[-1], sub(paste0(Symbol, "."), "", cn))
DT <- DT[, Symbol:=Symbol]
setkey(DT, Symbol, time)[]
} else {
setkey(DT, time)[]
}
}
Fro <- as.data.table.xts(getSymbols("FRO.OL"))
Fro <- as.data.table.xts(FRO.OL)
Fro
getSymbols(@FRO.OL)
getSymbols("FRO.OL")
Fro <- as.data.table.xts(FRO.OL)
Fro
ggplot(Fro, aes(x = time, y = OL.Close))+geom_Line()
ggplot(Fro, aes(x = time, y = OL.Close))+geom_line()
ggplot(Fro[time>2016-02-01], aes(x = time, y = OL.Close))+geom_line()
ggplot(Fro[time>as.Date('2016-02-01')], aes(x = time, y = OL.Close))+geom_line()
ggplot(Fro[time>"2016-02-01")], aes(x = time, y = OL.Close))+geom_line()
ggplot(Fro[time>"2016-02-01"], aes(x = time, y = OL.Close))+geom_line()
library(qmao)
install.packages("qmao")
install.packages("tawny")
library(tawny)
getIndexComposition()
library(XML)
library(RColorBrewer)
library(plyr)
library(quantmod)
library(Heatplus)
# get the list of symbols
l <- readHTMLTable('http://en.wikipedia.org/wiki/List_of_S%26P_500_companies')[[1]]
l <- as.vector(l$Ticker)
l <- l[c(-59, -71, -80, -124, -141, -147, -275, -283, -292, -299, -309, -316, -360, -378, -381, -406, -439, -470, -471)]
install.packages("XML")
library(XML)
library(RColorBrewer)
library(plyr)
library(quantmod)
library(Heatplus)
# get the list of symbols
l <- readHTMLTable('http://en.wikipedia.org/wiki/List_of_S%26P_500_companies')[[1]]
l <- as.vector(l$Ticker)
l <- l[c(-59, -71, -80, -124, -141, -147, -275, -283, -292, -299, -309, -316, -360, -378, -381, -406, -439, -470, -471)]
# get the list of symbols
l <- readHTMLTable('https://en.wikipedia.org/wiki/List_of_S%26P_500_companies')[[1]]
l <- as.vector(l$Ticker)
l <- l[c(-59, -71, -80, -124, -141, -147, -275, -283, -292, -299, -309, -316, -360, -378, -381, -406, -439, -470, -471)]
l
?readHTMLTable
l <- readHTMLTable('https://en.wikipedia.org/wiki/List_of_S%26P_500_companies')[[1]]
l <- readHTMLTable('https://en.wikipedia.org/wiki/List_of_S%26P_500_companies')
l
url<- 'https://en.wikipedia.org/wiki/List_of_S%26P_500_companies'
tables <- readHTMLTable(u)
url<- 'https://en.wikipedia.org/wiki/List_of_S%26P_500_companies'
tables <- readHTMLTable(u)
tables <- readHTMLTable(url)
url<- 'http://www.cboe.com/products/snp500.aspx'
tables <- readHTMLTable(url)
tables
tickers <- tables$NULL$Ticker
tickers <- tables$NULL
head(tables)
class(tables)
tables[1]
tables[[1[]]
tables[[1]]
tables[[1]]
tickers <- tables[[1]]$Ticker
tickers
?getSymbols
unlist(tickers)
sapply(tickers, paste, collapse="")
data.env <- new.env()
getSymbols(sapply(tickers, paste, collapse = ""), data.env)
data.env
library(data.table)
library(ggplot2)
library(quantmod)
library(XML)
# Load share price data
{
# Get data from yahoo finance
url <- 'http://www.barchart.com/stocks/sp500.php?_dtp1=0'
tables <- readHTMLTable(url)[[9]]
tickers <- tables$Sym
for (i in 1:length(tickers)){
tryCatch(getSymbols(as.character(tickers[i])),
error=function(e){},
finally = {})
}
# Feed into data.tables
for (i in 1:length(tickers)){
}
}
x<-as.data.table.xts(UA)
x
parseStr <- paste(as.character(tickers[i]),
"<- as.data.table.xts(",
as.character(tickers[i]),
")")
parseStr
for (i in 1:length(tickers)){
parseStr <- paste(as.character(tickers[i]),
"<- as.data.table.xts(",
as.character(tickers[i]),
")")
eval(parse(text = parseStr))
}
BF.B
for (i in 1:length(tickers)){
tryCatch(parseStr <- paste(as.character(tickers[i]),"<- as.data.table.xts(",as.character(tickers[i]),")"),
error = function(e){}, finally = {})
eval(parse(text = parseStr))
}
for (i in 1:length(tickers)){
parseStr <- paste(as.character(tickers[i]),"<- as.data.table.xts(",as.character(tickers[i]),")")
tryCatch(eval(parse(text = parseStr)), error = function(e){}, finally = {})
}
ZTS
y<- merge(ZTS,ZION)
y
ZTS
ZION
y<- merge(ZTS,ZION, all = T)
y<- merge(ZTS,ZION, all = TRUE)
y
rbind(ZTS, ZION)
?data.table
stock.data <- eval(parse(text = as.character(tickers[1])))
stock.data
stock.data <- eval(parse(text = as.character(tickers[1])))
for (i in 2:length(tickers)){
stock.data <- rbind(stock.data,
eval(parse(text = as.character(tickers[i]))))
}
stock.data <- eval(parse(text = as.character(tickers[1])))
for (i in 2:length(tickers)){
tryCatch(stock.data <- rbind(stock.data,
eval(parse(text = as.character(tickers[i])))),
error=function(e){},
finally={})
}
stock.data
?write.csv
write.csv(stock.data, file = 'C:/Users/Ulf/Dropbox/stockData.csv')
stock.data[symbol%in%c('A','ZTS')]
stock.data[Symbol%in%c('A','ZTS')]
ggplot(stock.data[Symbol%in%c('A','ZTS')],aes(x = time, y = adjusted))+geom_line()
ggplot(stock.data[Symbol%in%c('A','ZTS')],aes(x = time, y = Adjusted))+geom_line()
ggplot(stock.data[Symbol%in%c('A','ZTS')],aes(x = time, y = Adjusted, col = symbols()))+geom_line()
ggplot(stock.data[Symbol%in%c('A','ZTS')],aes(x = time, y = Adjusted, col = Symbol))+geom_line()
ggplot(stock.data[Symbol%in%c('A','GS','ZTS')],aes(x = time, y = Adjusted, col = Symbol))+geom_line()
ggplot(stock.data[Symbol%in%c('GS','JPM')],aes(x = time, y = Adjusted, col = Symbol))+geom_line()
ggplot(stock.data[Symbol%in%c(JPM')],aes(x = time, y = Adjusted, col = Symbol))+geom_line()
ggplot(stock.data[Symbol%in%c('JPM')],aes(x = time, y = Adjusted, col = Symbol))+geom_line()
ggplot(stock.data[Symbol%in%c('FRO')],aes(x = time, y = Adjusted, col = Symbol))+geom_line()
ggplot(stock.data[Symbol%in%c(JPM')],aes(x = time, y = Adjusted, col = Symbol))+geom_line()
ggplot(stock.data[Symbol%in%c('FRO')],aes(x = time, y = Adjusted, col = Symbol))+geom_line()
ggplot(stock.data[Symbol%in%c('MSFT')],aes(x = time, y = Adjusted, col = Symbol))+geom_line()
stock.data[,unique(time)]
getwd()
setwd('Dropbox/INSEAD/Big Data/INSEADAnalytics/CourseSessions/Sessions23/data/')
list.files
rm(list=ls())
list.files()
library(data.table)
boats <- data.table(read.csv('Boats.csv'))
boats
rows(boats)
colnames(boats)
boats <- data.table(read.csv('Boats.csv', sep = ''))
boats <- data.table(read.csv('Boats.csv', sep = ';'))
boats
colnames(boats)
library(ggplot2)
pca(boats)
pcauchy(boats)
PCA(boats)
boats.pca <- princomp(boats)
boats.pca
loadings(boats.pca)
loadings(boats.pca)
plot(boats.pca)
plot(boats.pca, type = 'l')
